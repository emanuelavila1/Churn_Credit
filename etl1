# CARREGAMENTO, LIMPEZA E TRATAMENTO DE UM DATASET.

**IMPORTANDO AS BIBLIOTECAS**
"""

import pandas as pd
import seaborn as srn
import statistics as sts
import numpy as np
import matplotlib.pyplot as plt

"""**IMPORTANDO O DATASET**"""

dataset = pd.read_csv("Churn.csv", sep=	";")
dataset.head()

"""**TAMANHO DO DATASET**"""

dataset.shape

"""**ATRIBUINDO O NOME AS COLUNAS**"""

dataset.columns = ["Id", "Score", "Estado", "Genero", "Idade", "Patrimonio", "Saldo", "Produtos", "TemCartCredito", "Ativo", "Salario", "Saiu"]
dataset.head()

"""**EXPLORAR DADOS CATEGORICOS**

"""

#estado
agrupado = dataset.groupby(["Estado"]).size()
agrupado

"""**GRÁFICO DE BARRAS**"""

agrupado.plot.bar(color="gray")

#genero
agrupado = dataset.groupby(["Genero"]).size()
agrupado

agrupado.plot.bar(color="gray")

#explorando colunas númericas
#score (potencial de crédito do cliente )
dataset["Score"].describe()

#Visuzalização em boxplot
srn.boxplot(dataset["Score"]).set_title("Score")

#Visualização do histograma
srn.histplot(dataset["Score"], kde=True)

#Idade
dataset["Idade"].describe()

srn.boxplot(dataset["Idade"]).set_title("Idade")

srn.histplot(dataset["Idade"], kde=True).set_title("Idade")

#saldo
dataset["Saldo"].describe()

srn.boxplot(dataset["Saldo"]).set_title("Saldo")

srn.histplot(dataset["Saldo"], kde=True).set_title("Saldo")

#Salario
dataset["Salario"].describe()

srn.boxplot(dataset["Salario"]).set_title("Salario")

srn.histplot(dataset["Salario"], kde=False).set_title("Salario")

#Valores NAN
#Genero e salario
dataset.isnull().sum()

#Salarios
#Remover nas e substituir pela mediana
mediana = sts.median(dataset["Salario"])
mediana

#Substituir NAN por mediana
dataset["Salario"].fillna(mediana, inplace=True)

#Verificando a substituição
dataset['Salario'].isnull().sum()

#Genero, falta de padronização
agrupado = dataset.groupby(["Genero"]).size()
agrupado

#Total de NANs
dataset["Genero"].isnull().sum()

#Preencher NAs com Masculino (moda)
dataset["Genero"].fillna("Masculino", inplace=True)

#Verificando a substituição
dataset['Genero'].isnull().sum()

#Padronização
dataset.loc[dataset["Genero"] == "M", "Genero"] = "Masculino"
dataset.loc[dataset["Genero"].isin(["Fem", "F"]), "Genero"] = "Feminino"
#Visuzalização do resultado
agrupado = dataset.groupby(["Genero"]).size()
agrupado

#Idades fora do dominio
dataset['Idade'].describe()

#Calcular a mediana
mediana = sts.median(dataset["Idade"])
mediana

#Substituir
dataset.loc[(dataset["Idade"] < 0) | (dataset["Idade"] > 120), "Idade"] = mediana

#Verificando se ainda existem idades fora do dominio
dataset.loc[(dataset["Idade"] < 0) | (dataset["Idade"] > 120) ]

#Dados duplicados coluna ID
dataset[dataset.duplicated(["Id"], keep=False)]

#Excluir
dataset.drop_duplicates(subset="Id", keep="first", inplace=True)
#Buscando duplicados
dataset[dataset.duplicated(["Id"], keep=False)]

#Estados fora do domínio
agrupado  = dataset.groupby(["Estado"]).size()
agrupado

#Atribuir a RS (moda)
dataset.loc[dataset["Estado"].isin(["RP", "SP", "TD"]), "Estado"] = "RS"
agrupado = dataset.groupby(["Estado"]).size()
agrupado

#Outliers de salario (Regra de negocio)
desv = sts.stdev(dataset["Salario"])
desv

#Definir padrão como maior que 2 desv
#Checando
dataset.loc[dataset["Salario"] >= 2 * desv]

#Atualizando para a mediana
mediana = sts.median(dataset["Salario"])
mediana

#Atribuindo
dataset.loc[dataset["Salario"] >= 2 * desv, "Salario"] = mediana

#Checando se atende o criterio
dataset.loc[dataset["Salario"] >= 2 * desv]

dataset.head()

dataset.shape

